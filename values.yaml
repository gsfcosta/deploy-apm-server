---
apmConfig:
  apm-server.yml: |
    apm-server:
      host: "0.0.0.0:8200"
      auth:
        secret_token: 'token'
      rum:
        enabled: true
        allow_service_names: []
        allow_origins: ['*']

    queue: {}

    output.elasticsearch:
      hosts: ["https://elasticsearch-master:9200"]
      username: "${ELASTICSEARCH_USERNAME}"
      password: "${ELASTICSEARCH_PASSWORD}"
      ## If SSL is enabled
      protocol: https
      ssl.certificate_authorities:
       - /usr/share/apm-server/config/certs/ca.crt

replicas: 1
extraContainers: ""
extraInitContainers: ""
extraEnvs:
  - name: "ELASTICSEARCH_USERNAME"
    valueFrom:
      secretKeyRef:
        name: elasticsearch-master-credentials
        key: username
  - name: "ELASTICSEARCH_PASSWORD"
    valueFrom:
      secretKeyRef:
        name: elasticsearch-master-credentials
        key: password

envFrom: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
image: "docker.elastic.co/apm/apm-server"
imageTag: "8.5.1"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []
managedServiceAccount: true
podAnnotations: {}
labels: {}
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 0
securityContext:
  privileged: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 0
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  failureThreshold: 3
  periodSeconds: 10
  timeoutSeconds: 5
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  failureThreshold: 3
  periodSeconds: 10
  timeoutSeconds: 5
resources:
  requests:
    cpu: "100m"
    memory: "100Mi"
  limits:
    cpu: "1000m"
    memory: "512Mi"

serviceAccount: ""
serviceAccountAnnotations: {}
secretMounts:
  - name: elasticsearch-master-certs
    secretName: elasticsearch-master-certs
    path: /usr/share/apm-server/config/certs/
terminationGracePeriod: 30
tolerations: []
nodeSelector: {}
affinity: {}
priorityClassName: ""
updateStrategy:
  type: "Recreate"
nameOverride: ""
fullnameOverride: ""
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  averageCpuUtilization: 50

ingress:
  enabled: true
  className: "nginx"
  pathtype: ImplementationSpecific
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - apm-server.domain
  tls:
    - secretName: certificate
      hosts:
        - apm-server.domain

service:
  type: ClusterIP
  loadBalancerIP: ""
  port: 8200
  nodePort: ""
  annotations: {}
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
# postStart:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
